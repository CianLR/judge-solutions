
int STEP_COUNT = 1;
int START = 10656;
int FPS = 1;

class Star {
  public int x, y, vx, vy;
  public Star(int x, int y, int vx, int vy) {
    this.x = x;
    this.y = y;
    this.vx = vx;
    this.vy = vy;
    for (int i = 0; i < START; ++i) {
      _next(); 
    }
  }

  void _next() {
    this.x += vx;
    this.y += vy;
  }

  void next() {
    for (int i = 0; i < STEP_COUNT; ++i) {
      _next();
    }
  }
}

ArrayList<Star> stars;

int WIDTH = 640;
int HEIGHT = 180;
int SIDE_PAD = 20;

void settings() {
  size(WIDTH, HEIGHT);
}

void setup() {
  frameRate(FPS);
  stars = new ArrayList<Star>();  stars.add(new Star(-42417, 32097, 4, -3));
  stars.add(new Star(-10502, -10533, 1, 1));
  stars.add(new Star(-53094, 32093, 5, -3));
  stars.add(new Star(-53090, -21188, 5, 2));
  stars.add(new Star(53486, 21441, -5, -2));
  stars.add(new Star(-21142, -42496, 2, 4));
  stars.add(new Star(-42422, 32088, 4, -3));
  stars.add(new Star(42778, 10784, -4, -1));
  stars.add(new Star(10826, 42748, -1, -4));
  stars.add(new Star(-10449, 53401, 1, -5));
  stars.add(new Star(-42453, -21187, 4, 2));
  stars.add(new Star(32154, -31839, -3, 3));
  stars.add(new Star(-42434, -53156, 4, 5));
  stars.add(new Star(-21149, 32097, 2, -3));
  stars.add(new Star(-10497, 53409, 1, -5));
  stars.add(new Star(-42438, -53151, 4, 5));
  stars.add(new Star(21490, 10778, -2, -1));
  stars.add(new Star(42831, 42753, -4, -4));
  stars.add(new Star(53474, -42501, -5, 4));
  stars.add(new Star(-42436, -21192, 4, 2));
  stars.add(new Star(53450, -53154, -5, 5));
  stars.add(new Star(32118, -21185, -3, 2));
  stars.add(new Star(-21158, -10533, 2, 1));
  stars.add(new Star(10842, 42749, -1, -4));
  stars.add(new Star(53467, 21436, -5, -2));
  stars.add(new Star(32130, -53160, -3, 5));
  stars.add(new Star(32119, -53151, -3, 5));
  stars.add(new Star(32143, -21183, -3, 2));
  stars.add(new Star(-10486, 10781, 1, -1));
  stars.add(new Star(-53098, 21433, 5, -2));
  stars.add(new Star(-10465, -42503, 1, 4));
  stars.add(new Star(-53083, 10776, 5, -1));
  stars.add(new Star(32173, -53151, -3, 5));
  stars.add(new Star(-31782, 21436, 3, -2));
  stars.add(new Star(32143, 10782, -3, -1));
  stars.add(new Star(21487, -42500, -2, 4));
  stars.add(new Star(-53082, 42752, 5, -4));
  stars.add(new Star(42775, -21183, -4, 2));
  stars.add(new Star(53431, -53160, -5, 5));
  stars.add(new Star(-53078, 10784, 5, -1));
  stars.add(new Star(-10505, 53408, 1, -5));
  stars.add(new Star(21507, -53151, -2, 5));
  stars.add(new Star(42814, -53160, -4, 5));
  stars.add(new Star(53427, 53402, -5, -5));
  stars.add(new Star(-21164, 10780, 2, -1));
  stars.add(new Star(21461, 53404, -2, -5));
  stars.add(new Star(32173, 21436, -3, -2));
  stars.add(new Star(-53086, 21438, 5, -2));
  stars.add(new Star(32146, -42503, -3, 4));
  stars.add(new Star(32159, 21439, -3, -2));
  stars.add(new Star(53442, 42751, -5, -4));
  stars.add(new Star(-31817, 42752, 3, -4));
  stars.add(new Star(53459, -21188, -5, 2));
  stars.add(new Star(21458, -21191, -2, 2));
  stars.add(new Star(-21134, 53402, 2, -5));
  stars.add(new Star(-10481, -10534, 1, 1));
  stars.add(new Star(-21137, -53158, 2, 5));
  stars.add(new Star(-21110, -31839, 2, 3));
  stars.add(new Star(-21153, 21441, 2, -2));
  stars.add(new Star(-31766, -42495, 3, 4));
  stars.add(new Star(42799, -53155, -4, 5));
  stars.add(new Star(-42449, 42752, 4, -4));
  stars.add(new Star(-53102, -10531, 5, 1));
  stars.add(new Star(-21149, -10527, 2, 1));
  stars.add(new Star(-31801, 53401, 3, -5));
  stars.add(new Star(-10462, -31842, 1, 3));
  stars.add(new Star(-31806, 42751, 3, -4));
  stars.add(new Star(-10502, 10777, 1, -1));
  stars.add(new Star(-53129, 10785, 5, -1));
  stars.add(new Star(10803, -21186, -1, 2));
  stars.add(new Star(42810, -31847, -4, 3));
  stars.add(new Star(53450, -21189, -5, 2));
  stars.add(new Star(53434, 21433, -5, -2));
  stars.add(new Star(-21126, 32094, 2, -3));
  stars.add(new Star(53446, -53157, -5, 5));
  stars.add(new Star(21518, -31839, -2, 3));
  stars.add(new Star(-21146, -53157, 2, 5));
  stars.add(new Star(32135, 32089, -3, -3));
  stars.add(new Star(-53094, -21188, 5, 2));
  stars.add(new Star(32170, -53152, -3, 5));
  stars.add(new Star(-42476, 21437, 4, -2));
  stars.add(new Star(-42446, -31840, 4, 3));
  stars.add(new Star(53471, -42503, -5, 4));
  stars.add(new Star(10850, 42752, -1, -4));
  stars.add(new Star(-21141, -10531, 2, 1));
  stars.add(new Star(-10508, 53404, 1, -5));
  stars.add(new Star(42818, -21190, -4, 2));
  stars.add(new Star(21483, -42503, -2, 4));
  stars.add(new Star(-10482, -42503, 1, 4));
  stars.add(new Star(-53089, -31847, 5, 3));
  stars.add(new Star(32162, 32092, -3, -3));
  stars.add(new Star(-31763, 42753, 3, -4));
  stars.add(new Star(-10462, -10535, 1, 1));
  stars.add(new Star(42831, 21433, -4, -2));
  stars.add(new Star(42819, -42504, -4, 4));
  stars.add(new Star(53426, -21192, -5, 2));
  stars.add(new Star(21475, -42495, -2, 4));
  stars.add(new Star(-10462, 32092, 1, -3));
  stars.add(new Star(42802, -10533, -4, 1));
  stars.add(new Star(32146, 32088, -3, -3));
  stars.add(new Star(10831, -21184, -1, 2));
  stars.add(new Star(53466, 42752, -5, -4));
  stars.add(new Star(21516, -42499, -2, 4));
  stars.add(new Star(32159, -53152, -3, 5));
  stars.add(new Star(-53123, 32097, 5, -3));
  stars.add(new Star(-53126, 21434, 5, -2));
  stars.add(new Star(-31790, -21189, 3, 2));
  stars.add(new Star(-31789, -31843, 3, 3));
  stars.add(new Star(-10502, -21185, 1, 2));
  stars.add(new Star(-53124, 21441, 5, -2));
  stars.add(new Star(53486, 10779, -5, -1));
  stars.add(new Star(42805, -31846, -4, 3));
  stars.add(new Star(-42470, 53406, 4, -5));
  stars.add(new Star(53469, -42495, -5, 4));
  stars.add(new Star(53450, 42751, -5, -4));
  stars.add(new Star(42822, -31843, -4, 3));
  stars.add(new Star(32133, 21436, -3, -2));
  stars.add(new Star(21487, 21437, -2, -2));
  stars.add(new Star(32149, -31841, -3, 3));
  stars.add(new Star(-31778, -53151, 3, 5));
  stars.add(new Star(32175, -42504, -3, 4));
  stars.add(new Star(10834, 42750, -1, -4));
  stars.add(new Star(10855, 10777, -1, -1));
  stars.add(new Star(21492, 21438, -2, -2));
  stars.add(new Star(-21131, 21434, 2, -2));
  stars.add(new Star(53455, 32091, -5, -3));
  stars.add(new Star(-31786, 53408, 3, -5));
  stars.add(new Star(10829, 10781, -1, -1));
  stars.add(new Star(10831, -10529, -1, 1));
  stars.add(new Star(-42460, 53405, 4, -5));
  stars.add(new Star(10813, -31839, -1, 3));
  stars.add(new Star(-53076, 21432, 5, -2));
  stars.add(new Star(-10452, -42499, 1, 4));
  stars.add(new Star(21487, -10534, -2, 1));
  stars.add(new Star(-53082, 10781, 5, -1));
  stars.add(new Star(10839, -10527, -1, 1));
  stars.add(new Star(42770, 21441, -4, -2));
  stars.add(new Star(53466, -21185, -5, 2));
  stars.add(new Star(10812, 42753, -1, -4));
  stars.add(new Star(32156, 21432, -3, -2));
  stars.add(new Star(10803, 53407, -1, -5));
  stars.add(new Star(53430, 42747, -5, -4));
  stars.add(new Star(-53114, 32088, 5, -3));
  stars.add(new Star(32156, 42748, -3, -4));
  stars.add(new Star(42802, -42499, -4, 4));
  stars.add(new Star(-53110, -42500, 5, 4));
  stars.add(new Star(21474, -31840, -2, 3));
  stars.add(new Star(-21166, 21432, 2, -2));
  stars.add(new Star(-10506, 42746, 1, -4));
  stars.add(new Star(-31819, -42499, 3, 4));
  stars.add(new Star(-31769, -10528, 3, 1));
  stars.add(new Star(53426, 32088, -5, -3));
  stars.add(new Star(-21150, -10529, 2, 1));
  stars.add(new Star(-53086, 53408, 5, -5));
  stars.add(new Star(-31782, 32095, 3, -3));
  stars.add(new Star(-42449, 42747, 4, -4));
  stars.add(new Star(-53098, -31847, 5, 3));
  stars.add(new Star(32162, -21185, -3, 2));
  stars.add(new Star(-53110, -42497, 5, 4));
  stars.add(new Star(53455, -10532, -5, 1));
  stars.add(new Star(32157, -42504, -3, 4));
  stars.add(new Star(42802, -53155, -4, 5));
  stars.add(new Star(-53106, 42749, 5, -4));
  stars.add(new Star(-31781, -31848, 3, 3));
  stars.add(new Star(-53100, 53403, 5, -5));
  stars.add(new Star(-10508, -21187, 1, 2));
  stars.add(new Star(-42477, 53407, 4, -5));
  stars.add(new Star(-31795, -42504, 3, 4));
  stars.add(new Star(-53077, -10527, 5, 1));
  stars.add(new Star(32133, 32097, -3, -3));
  stars.add(new Star(-53090, 53409, 5, -5));
  stars.add(new Star(10847, 42749, -1, -4));
  stars.add(new Star(21466, -21192, -2, 2));
  stars.add(new Star(21476, -21192, -2, 2));
  stars.add(new Star(-10462, 21439, 1, -2));
  stars.add(new Star(53430, -53153, -5, 5));
  stars.add(new Star(42831, -10534, -4, 1));
  stars.add(new Star(-42435, 21432, 4, -2));
  stars.add(new Star(32131, 53400, -3, -5));
  stars.add(new Star(-10481, -31844, 1, 3));
  stars.add(new Star(-10478, 53404, 1, -5));
  stars.add(new Star(-42438, -53160, 4, 5));
  stars.add(new Star(32170, -53153, -3, 5));
  stars.add(new Star(42778, 32092, -4, -3));
  stars.add(new Star(-42427, 42753, 4, -4));
  stars.add(new Star(21476, -21183, -2, 2));
  stars.add(new Star(-21126, -21191, 2, 2));
  stars.add(new Star(-21118, -31842, 2, 3));
  stars.add(new Star(-10505, -31848, 1, 3));
  stars.add(new Star(-42421, -10536, 4, 1));
  stars.add(new Star(-31779, 21436, 3, -2));
  stars.add(new Star(-53106, 21437, 5, -2));
  stars.add(new Star(42807, -53151, -4, 5));
  stars.add(new Star(10810, 10778, -1, -1));
  stars.add(new Star(32154, -10534, -3, 1));
  stars.add(new Star(42814, -53160, -4, 5));
  stars.add(new Star(53430, 21439, -5, -2));
  stars.add(new Star(-42462, 32097, 4, -3));
  stars.add(new Star(21506, 10777, -2, -1));
  stars.add(new Star(-53092, -42495, 5, 4));
  stars.add(new Star(-53081, -10528, 5, 1));
  stars.add(new Star(53471, -53153, -5, 5));
  stars.add(new Star(-53106, -21187, 5, 2));
  stars.add(new Star(53450, 21437, -5, -2));
  stars.add(new Star(21515, -10527, -2, 1));
  stars.add(new Star(42791, -31846, -4, 3));
  stars.add(new Star(21463, 21433, -2, -2));
  stars.add(new Star(53485, 10776, -5, -1));
  stars.add(new Star(42790, -31848, -4, 3));
  stars.add(new Star(-21122, -21192, 2, 2));
  stars.add(new Star(21511, 53406, -2, -5));
  stars.add(new Star(-10505, -21192, 1, 2));
  stars.add(new Star(-21163, 21436, 2, -2));
  stars.add(new Star(53426, -42496, -5, 4));
  stars.add(new Star(32162, 10781, -3, -1));
  stars.add(new Star(-42470, -10527, 4, 1));
  stars.add(new Star(-10458, 32093, 1, -3));
  stars.add(new Star(-21105, 42745, 2, -4));
  stars.add(new Star(53479, -31840, -5, 3));
  stars.add(new Star(-31805, 42744, 3, -4));
  stars.add(new Star(21498, 32094, -2, -3));
  stars.add(new Star(-10486, 32094, 1, -3));
  stars.add(new Star(21484, 10781, -2, -1));
  stars.add(new Star(32140, 32088, -3, -3));
  stars.add(new Star(-21130, 10777, 2, -1));
  stars.add(new Star(42794, -10533, -4, 1));
  stars.add(new Star(21498, -21187, -2, 2));
  stars.add(new Star(-21116, -31848, 2, 3));
  stars.add(new Star(53450, -31844, -5, 3));
  stars.add(new Star(32142, 42745, -3, -4));
  stars.add(new Star(-31782, -53152, 3, 5));
  stars.add(new Star(-53091, -10527, 5, 1));
  stars.add(new Star(42798, 10777, -4, -1));
  stars.add(new Star(-42422, 42744, 4, -4));
  stars.add(new Star(10855, -10529, -1, 1));
  stars.add(new Star(21490, 32094, -2, -3));
  stars.add(new Star(-42437, -42504, 4, 4));
  stars.add(new Star(53483, -21192, -5, 2));
  stars.add(new Star(53466, 53406, -5, -5));
  stars.add(new Star(-10458, -31848, 1, 3));
  stars.add(new Star(42771, 32090, -4, -3));
  stars.add(new Star(-31780, 53404, 3, -5));
  stars.add(new Star(-53115, -10536, 5, 1));
  stars.add(new Star(-10449, 10776, 1, -1));
  stars.add(new Star(-31772, 32097, 3, -3));
  stars.add(new Star(21515, -21186, -2, 2));
  stars.add(new Star(42815, 42749, -4, -4));
  stars.add(new Star(-21158, 21437, 2, -2));
  stars.add(new Star(42774, -31846, -4, 3));
  stars.add(new Star(-53105, 53405, 5, -5));
  stars.add(new Star(21478, -10527, -2, 1));
  stars.add(new Star(-31781, -21183, 3, 2));
  stars.add(new Star(53450, 32093, -5, -3));
  stars.add(new Star(10810, -42499, -1, 4));
  stars.add(new Star(32132, 10781, -3, -1));
  stars.add(new Star(32138, 10785, -3, -1));
  stars.add(new Star(10863, -21190, -1, 2));
  stars.add(new Star(10859, 53409, -1, -5));
  stars.add(new Star(-53109, -42499, 5, 4));
  stars.add(new Star(32132, 53400, -3, -5));
  stars.add(new Star(53434, 32088, -5, -3));
  stars.add(new Star(53479, -10530, -5, 1));
  stars.add(new Star(53487, 21432, -5, -2));
  stars.add(new Star(53427, 10779, -5, -1));
  stars.add(new Star(-10465, 21434, 1, -2));
  stars.add(new Star(-21149, 21432, 2, -2));
  stars.add(new Star(10823, -42504, -1, 4));
  stars.add(new Star(-42446, 10783, 4, -1));
  stars.add(new Star(-31771, 42753, 3, -4));
  stars.add(new Star(21501, 10780, -2, -1));
  stars.add(new Star(-53081, -31847, 5, 3));
  stars.add(new Star(53475, 53400, -5, -5));
  stars.add(new Star(-53074, -53160, 5, 5));
  stars.add(new Star(-53126, 21441, 5, -2));
  stars.add(new Star(10823, -21190, -1, 2));
  stars.add(new Star(53485, -53160, -5, 5));
  stars.add(new Star(-21108, 10785, 2, -1));
  stars.add(new Star(-42457, 32097, 4, -3));
  stars.add(new Star(-10486, -53158, 1, 5));
  stars.add(new Star(53466, 21432, -5, -2));
  stars.add(new Star(10834, 53409, -1, -5));
  stars.add(new Star(21493, 32090, -2, -3));
  stars.add(new Star(-31798, -21183, 3, 2));
  stars.add(new Star(-42429, -10536, 4, 1));
  stars.add(new Star(-53131, 10781, 5, -1));
  stars.add(new Star(53459, 53404, -5, -5));
  stars.add(new Star(53469, 53404, -5, -5));
  stars.add(new Star(42828, 53409, -4, -5));
  stars.add(new Star(-21139, -53160, 2, 5));
  stars.add(new Star(-31769, -42499, 3, 4));
  stars.add(new Star(42821, 10781, -4, -1));
  stars.add(new Star(21490, 21434, -2, -2));
  stars.add(new Star(21459, -53158, -2, 5));
  stars.add(new Star(10842, -10533, -1, 1));
  stars.add(new Star(42778, 32097, -4, -3));
  stars.add(new Star(32131, 42750, -3, -4));
  stars.add(new Star(42821, -10531, -4, 1));
  stars.add(new Star(42775, -53159, -4, 5));
  stars.add(new Star(42820, -42495, -4, 4));
  stars.add(new Star(53468, 53404, -5, -5));
  stars.add(new Star(-31818, 42746, 3, -4));
  stars.add(new Star(-42422, -31840, 4, 3));
  stars.add(new Star(21479, -21183, -2, 2));
  stars.add(new Star(-42454, 21435, 4, -2));
  stars.add(new Star(10847, -53152, -1, 5));
  stars.add(new Star(-31813, 53409, 3, -5));
  stars.add(new Star(10847, 21435, -1, -2));
  stars.add(new Star(-53081, 32094, 5, -3));
  stars.add(new Star(-42473, 32096, 4, -3));
  stars.add(new Star(10807, -42503, -1, 4));
  stars.add(new Star(10862, 32097, -1, -3));
  stars.add(new Star(53469, 10785, -5, -1));
  stars.add(new Star(21503, -42498, -2, 4));
  stars.add(new Star(53430, 21435, -5, -2));
  stars.add(new Star(53427, -31841, -5, 3));
  stars.add(new Star(42799, -42495, -4, 4));
  stars.add(new Star(-21107, -31839, 2, 3));
  stars.add(new Star(21511, -53151, -2, 5));
  stars.add(new Star(-42433, -10530, 4, 1));
  stars.add(new Star(-31777, -31846, 3, 3));
  stars.add(new Star(-21141, -21191, 2, 2));
  stars.add(new Star(-53100, 32094, 5, -3));
  stars.add(new Star(21514, 42753, -2, -4));
  stars.add(new Star(-42466, 10785, 4, -1));
  stars.add(new Star(-31790, 21441, 3, -2));
  stars.add(new Star(-42433, 32095, 4, -3));
  stars.add(new Star(-42430, -42497, 4, 4));
  stars.add(new Star(21503, -31840, -2, 3));
  stars.add(new Star(21475, -53154, -2, 5));
  stars.add(new Star(-42449, 32095, 4, -3));
  stars.add(new Star(-53094, 10784, 5, -1));
  stars.add(new Star(21495, -21192, -2, 2));
  stars.add(new Star(53434, -21191, -5, 2));
  stars.add(new Star(32143, -21189, -3, 2));
  stars.add(new Star(-21140, -53155, 2, 5));
  stars.add(new Star(21495, 42744, -2, -4));
  stars.add(new Star(21502, 32097, -2, -3));
  stars.add(new Star(-53094, -42495, 5, 4));
  stars.add(new Star(-42474, 53406, 4, -5));
  stars.add(new Star(-21141, -10535, 2, 1));
  stars.add(new Star(42788, -31843, -4, 3));
  stars.add(new Star(-21139, -21192, 2, 2));
  stars.add(new Star(-10493, 10782, 1, -1));
}

void mousePressed() {
  noLoop();
}

void draw() {
  background(0);
  int minx=stars.get(0).x, miny=stars.get(0).y, maxx=stars.get(0).x, maxy=stars.get(0).y;
  for (Star s : stars) {
    minx = min(minx, s.x);
    miny = min(miny, s.y);
    maxx = max(maxx, s.x);
    maxy = max(maxy, s.y);
  }
  stroke(255, 255, 255);
  strokeWeight(2);
  for (Star s : stars) {
    point(map(s.x, minx, maxx, SIDE_PAD, WIDTH - SIDE_PAD),
          map(s.y, miny, maxy, SIDE_PAD, HEIGHT - SIDE_PAD));
  }
  for (Star s : stars) {
    s.next(); 
  }
  println(frameCount);
}
